// --------------------------------------------------------------------------
// MSOEOBJ.IDL
// Copyright (c) 1993-1998 Microsoft Corporation, All Rights Reserved
// --------------------------------------------------------------------------


// This file will be processed by the MIDL tool to
// produce the type library (MSOEOBJ.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "oestore.idl";

#include "msoedisp.h"

cpp_quote("//--------------------------------------------------------------------------------")
cpp_quote("// MSOEOBJ.H")
cpp_quote("//--------------------------------------------------------------------------------")
cpp_quote("// (C) Copyright 1993-1998 Microsoft Corporation.  All Rights Reserved.")
cpp_quote("//")
cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF")
cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO")
cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A")
cpp_quote("// PARTICULAR PURPOSE.")
cpp_quote("//--------------------------------------------------------------------------------")
cpp_quote("")
cpp_quote("#pragma comment(lib, \"uuid.lib\")")
cpp_quote("")
cpp_quote("// --------------------------------------------------------------------------")
cpp_quote("// GUIDS")
cpp_quote("// --------------------------------------------------------------------------")
cpp_quote("")
cpp_quote("// {A2A94190-6C29-11d1-9DFE-006097D50408}")
cpp_quote("DEFINE_GUID(CMDSETID_OEMessageView, 0xa2a94190, 0x6c29, 0x11d1, 0x9d, 0xfe, 0x0, 0x60, 0x97, 0xd5, 0x4, 0x8);")
cpp_quote("")
cpp_quote("// {A2A94191-6C29-11d1-9DFE-006097D50408}")
cpp_quote("DEFINE_GUID(CMDSETID_OEMessageList, 0xa2a94191, 0x6c29, 0x11d1, 0x9d, 0xfe, 0x0, 0x60, 0x97, 0xd5, 0x4, 0x8);")
cpp_quote("")


//---------------------------------------------------------------------------
// IListSelector Interface
//---------------------------------------------------------------------------
[
    object,
    uuid(69fdcd50-16cf-11d2-af46-00c04fa31b90),
    helpstring("IListSelector Interface"),
    pointer_default(unique)
]
interface IListSelector : IUnknown 
{
    // Tells selector what row to activate
    HRESULT SetActiveRow([in] ROWINDEX iRow);

    // Tells selector what handle to send the change row message to
    HRESULT Advise([in] HWND hwndAdvise);

    // Clears the handle that the selector is trying to advise
    HRESULT Unadvise(void);
};



//---------------------------------------------------------------------------
// IMessageList Interface
//---------------------------------------------------------------------------
[
    object,
    uuid(DE89B950-A597-11D1-9E46-006097D50408),
    helpstring("IMessageList Interface"),
    pointer_default(unique)
]
interface IMessageList : IUnknown
{
    // Create the message list in an non-activeX way
    HRESULT CreateList([in] HWND hwndParent, [in] IUnknown *pFrame, 
                       [in] HWND *phwndList);

    cpp_quote("#define FOM_THREAD               0x00000001")
    cpp_quote("#define FOM_EXPANDTHREADS        0x00000002")
    cpp_quote("#define FOM_SELECTFIRSTUNREAD    0x00000004")
    cpp_quote("#define FOM_MESSAGELISTTIPS      0x00000008")
    cpp_quote("#define FOM_POLLTIME             0x00000020")
    cpp_quote("#define FOM_OFFLINEPROMPT        0x00000040")
    cpp_quote("#define FOM_COLORWATCHED         0x00000080")
    cpp_quote("#define FOM_GETXHEADERS          0x00000100")
    cpp_quote("#define FOM_SHOWDELETED          0x00000200")
    cpp_quote("#define FOM_SHOWREPLIES          0x00000400")

    typedef struct tagFOLDER_OPTIONS
    {
        DWORD       cbSize;
        DWORD       dwMask;
        BOOL        fThread;
        BOOL        fExpandThreads;
        BOOL        fSelectFirstUnread;
        BOOL        fMessageListTips;
        DWORD       dwPollTime;
        BOOL        fGoOnlinePrompt;
        DWORD       clrWatched;
        DWORD       dwGetXHeaders;
        BOOL        fDeleted;
        BOOL        fReplies;
    } FOLDER_OPTIONS;
    
    // Tells the message list which folder to display
    HRESULT SetFolder([in] FOLDERID idFolder, [in] IMessageServer *pServer,
                      [in] BOOL fSubFolders, [in] FINDINFO *pFindInfo, [in] IStoreCallback *pCallback);

    // Allows the caller to update settings on the view
    HRESULT SetViewOptions([in] FOLDER_OPTIONS *pOptions);

    // Allows the caller to update settings on the view
    HRESULT GetViewOptions([in, out] FOLDER_OPTIONS *pOptions);

    // Notification that the control is about to be closed.  The control should
    // save any state and release any objects at this point.
    HRESULT OnClose(void);

    // Allows the frame to get the current position of the control
    HRESULT GetRect([out] LPRECT prc);

    // Allows the frame to position the control
    HRESULT SetRect([in] RECT rc);

    // Allows the frame to query whether or not the message list has focus
    HRESULT HasFocus(void);

    // Allows the message list to add or remove any menu items
    HRESULT OnPopupMenu([in] HMENU hMenu, [in] DWORD uID);

    // Returns an array of rows that are selected
    HRESULT GetSelected([out] DWORD *pdwFocused,
                        [out] DWORD *pcSelected, 
                        [out, size_is(, *pcSelected)] DWORD **prgSelected);

    // Returns the number of rows selected
    HRESULT GetSelectedCount([out] DWORD *pdwCount);

    // Returns a stream to a message for the requested row
    HRESULT GetMessage([in] DWORD dwRow, 
                       [in] BOOL fDownload, 
                       [in] BOOL fBookmark,
                       [out] IUnknown **ppMessage);

    // Returns a structure containing the header information for the requested
    // row.
    HRESULT GetMessageInfo([in] DWORD dwRow, [out] MESSAGEINFO **ppMsgInfo);

    // Get a folderid for a particular row...
    HRESULT GetRowFolderId([in] DWORD dwRow, [out] LPFOLDERID pidFolder);

    // Mark the requested row.
    HRESULT MarkMessage([in] DWORD dwRow, [in] MARK_TYPE mark);

    // Must call after calling GetMessageInfo
    HRESULT FreeMessageInfo([in,out] MESSAGEINFO *pMsgInfo);

    // Allows the caller to mark a row as read
    HRESULT MarkRead([in] BOOL fBookmark, [in] DWORD dwRow);

    // Returns the message table that the message list is currently viewing
    HRESULT GetMessageTable([out] IMessageTable **ppTable);

    // Get's a list selector interface for the notes
    HRESULT GetListSelector([out] IListSelector **ppListSelector);

    // Returns the total, unread, and on server counts
    HRESULT GetMessageCounts([out] DWORD *cTotal, 
                             [out] DWORD *cUnread, 
                             [out] DWORD *cOnServer);

    // Returns the IMessageServer that's being used to display the current folder
    HRESULT GetMessageServer([out] IMessageServer **ppServer);

    // Returns the ListView item state for the focused item.  This is used to make
    // the one handed reading work correctly.
    HRESULT GetFocusedItemState([out] DWORD *pdwState);

    HRESULT ProcessReceipt(IMimeMessage *pMessage);
    
    HRESULT GetAdBarUrl(void);
};


//---------------------------------------------------------------------------
// IOEMessageList Interface
//---------------------------------------------------------------------------
[
    object,
    uuid(DE89B951-A597-11D1-9E46-006097D50408),
    helpstring("IOEMessageList Interface"),
    pointer_default(unique),
    dual
]
interface IOEMessageList : IDispatch
{
    // The Folder property allows you to determine which folder the message list 
    // should be displaying.  The parameter is the FOLDERID that you get from
    // IOEFolderCollection.
    [propget, id(DISPID_LISTPROP_FOLDER), displaybind, bindable, requestedit]               HRESULT Folder([out, retval] ULONGLONG *pVal);
    [propput, id(DISPID_LISTPROP_FOLDER), displaybind, bindable, requestedit]               HRESULT Folder([in] ULONGLONG newVal);

    // The ExpandGroups property determines whether or not messages that are 
    // grouped into conversations should be expanded by default or collapsed.
    // If the property is TRUE, groups will be expanded.
    [propget, id(DISPID_LISTPROP_EXPAND_GROUPS), displaybind, bindable, requestedit]        HRESULT ExpandGroups([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_EXPAND_GROUPS), displaybind, bindable, requestedit]        HRESULT ExpandGroups([in] BOOL newVal);

    // The GroupMessages property allows the caller to specify that messages
    // should be grouped into conversations.  If the property is TRUE, then 
    // messages will be grouped.
    [propget, id(DISPID_LISTPROP_GROUP_MESSAGES), displaybind, bindable, requestedit]       HRESULT GroupMessages([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_GROUP_MESSAGES), displaybind, bindable, requestedit]       HRESULT GroupMessages([in] BOOL newVal);

    // The SelectFirstUnread property allows the caller to specify whether or
    // not the first unread message in the folder should be selected after the
    // folder is loaded.  If the property is TRUE, the first unread message 
    // will be selected.
    [propget, id(DISPID_LISTPROP_SELECT_FIRST_UNREAD), displaybind, bindable, requestedit]  HRESULT SelectFirstUnread([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_SELECT_FIRST_UNREAD), displaybind, bindable, requestedit]  HRESULT SelectFirstUnread([in] BOOL newVal);

    // The MessageTips property allows the caller to turn on tooltips over 
    // fields in the list that are truncated.  If this property is TRUE, then
    // tips will be shown.
    [propget, id(DISPID_LISTPROP_MESSAGE_TIPS), displaybind, bindable, requestedit]         HRESULT MessageTips([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_MESSAGE_TIPS), displaybind, bindable, requestedit]         HRESULT MessageTips([in] BOOL newVal);

    // The ScrollTips property determines whether or not a tip will be 
    // displayed by the mouse as the user is scrolling.  The tip will tell
    // the user what row in the table is at the top of the list.    
    [propget, id(DISPID_LISTPROP_SCROLL_TIPS), displaybind, bindable, requestedit]          HRESULT ScrollTips([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_SCROLL_TIPS), displaybind, bindable, requestedit]          HRESULT ScrollTips([in] BOOL newVal);

    // The Count property allows the caller to retrieve the total number of 
    // messages in the folder.
    [propget, id(DISPID_LISTPROP_COUNT), displaybind, bindable]                             HRESULT Count([out, retval] long *pVal);

    // The UnreadCount property allows the caller to retrieve the total number
    // of unread messages in the folder.
    [propget, id(DISPID_LISTPROP_UNREAD_COUNT), displaybind, bindable]                      HRESULT UnreadCount([out, retval] long *pVal);

    // The SelectedCount property allows the caller to retrieve the total 
    // number of selected messages in the folder.
    [propget, id(DISPID_LISTPROP_SELECTED_COUNT), displaybind, bindable]                    HRESULT SelectedCount([out, retval] long *pVal);

    // The PreviewMessage property allows the caller to retreive a URL pointing
    // to the message that should be loaded into a preview pane.
    [propget, id(DISPID_LISTPROP_PREVIEW_SRC), displaybind, bindable]                       HRESULT PreviewMessage([out, retval] BSTR *pVal);

    // The FilterMessages property allows the caller to specify that messages
    // should be filter according to the specified filter id.  The filter is tells the 
    // message list which filter to use 
    // messages will be grouped.
    [propget, id(DISPID_LISTPROP_FILTER_MESSAGES), displaybind, bindable, requestedit]      HRESULT FilterMessages([out, retval] ULONGLONG *pVal);
    [propput, id(DISPID_LISTPROP_FILTER_MESSAGES), displaybind, bindable, requestedit]      HRESULT FilterMessages([in] ULONGLONG newVal);

    // The ShowDeleted property allows the caller to specify that messages
    // that are marked as deleted should be hidden.  If the property is TRUE, then 
    // messages that are marked as deleted will be hidden.
    [propget, id(DISPID_LISTPROP_SHOW_DELETED), displaybind, bindable, requestedit]         HRESULT ShowDeleted([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_SHOW_DELETED), displaybind, bindable, requestedit]         HRESULT ShowDeleted([in] BOOL newVal);

    // The ShowDeleted property allows the caller to specify that messages
    // that are marked as deleted should be hidden.  If the property is TRUE, then 
    // messages that are marked as deleted will be hidden.
    [propget, id(DISPID_LISTPROP_SHOW_REPLIES), displaybind, bindable, requestedit]         HRESULT ShowReplies([out, retval] BOOL *pVal);
    [propput, id(DISPID_LISTPROP_SHOW_REPLIES), displaybind, bindable, requestedit]         HRESULT ShowReplies([in] BOOL newVal);

};


[
    uuid(233A9691-667E-11d1-9DFB-006097D50408),
    version(1.0),
    helpstring("Microsoft Outlook Express Type Library")
]
library MSOEOBJ
{
    importlib("stdole2.tlb");

    cpp_quote("#define PROGRESS_STATE_DEFAULT  0x00000000")
    cpp_quote("#define PROGRESS_STATE_BEGIN    0x00000001")
    cpp_quote("#define PROGRESS_STATE_END      0x00000002")

    [
        uuid(233A969A-667E-11d1-9DFB-006097D50408)
    ]
    dispinterface _MessageListEvents
    {
        properties:
        methods:
            // Fired whenever the selection in the ListView changes.  cSel is the 
            // new number of items selected.
            [id(DISPID_LISTEVENT_SELECTIONCHANGED)]     void OnSelectionChanged([in] long cSelected);

            // Fired whenever the IMessageList object get's or loses the input
            // focus.  fFocus is TRUE if the window is accepting focus, FALSE if
            // the window is losing focus.
            [id(DISPID_LISTEVENT_FOCUSCHANGED)]         void OnFocusChanged([in] long fFocus);

            // Fired whenever the number of messages in view changes, or the number
            // of unread messages changes.  cMessages is the total number of messages,
            // cUnread is the number of unread messages, and cOnServer is the number
            // of messages left on the server (interesting in news).
            [id(DISPID_LISTEVENT_COUNTCHANGED)]         void OnMessageCountChanged([in] long cMessages, [in] long cUnread, [in] long cOnServer);

            // Fired whenever the message list needs to display status text.  
            // szStatus contains the string to display.
            [id(DISPID_LISTEVENT_UPDATESTATUS)]         void OnUpdateStatus([in] BSTR szStatus);

            // Fired whenever the message list is downloading information and
            // needs to display progress.
            [id(DISPID_LISTEVENT_UPDATEPROGRESS)]       void OnUpdateProgress([in] long lProgress, [in] long lMax, [in] long lState);

            // Fired whenever an error occurs
            [id(DISPID_LISTEVENT_ERROR)]                void OnError([in] DWORD ids);

            // Fired whenever the user double clicks or hit's enter on a row.
            [id(DISPID_LISTEVENT_ITEMACTIVATE)]         void OnItemActivate(void);

            // Fired whenever any commands that are visible (aka toolbar buttons)
            // should be updated.
            [id(DISPID_LISTEVENT_UPDATECOMMANDSTATE)]   void OnUpdateCommandState(void);
    };

    [
        uuid(233A9692-667E-11d1-9DFB-006097D50408),
        helpstring("MessageList Class")
    ]
    coclass MessageList
    {
        [default] interface IOEMessageList;
        [default, source] dispinterface _MessageListEvents;
    };

#if 0
    // DISABLED OE MOM for OE5

    // ---------------------------------------------------------------------------------------
    // IID_IOEMessage
    // ---------------------------------------------------------------------------------------
    [
        uuid(06BE731E-EF34-11d1-ACD8-00C04FA31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOEMessage : IDispatch
    {
        [propget, id(DISPID_IOEMESSAGE_SUBJECT)] HRESULT subject([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEMESSAGE_SUBJECT)] HRESULT subject([in] BSTR bstr);

        [propget, id(DISPID_IOEMESSAGE_TO)] HRESULT to([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEMESSAGE_TO)] HRESULT to([in] BSTR bstr);

        [propget, id(DISPID_IOEMESSAGE_CC)] HRESULT cc([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEMESSAGE_CC)] HRESULT cc([in] BSTR bstr);

        [propget, id(DISPID_IOEMESSAGE_SENDER)] HRESULT sender([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEMESSAGE_SENDER)] HRESULT sender([in] BSTR bstr);

        [propget, id(DISPID_IOEMESSAGE_TEXT)] HRESULT text([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEMESSAGE_TEXT)] HRESULT text([in] BSTR bstr);

        [propget, id(DISPID_IOEMESSAGE_HTML)] HRESULT html([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEMESSAGE_HTML)] HRESULT html([in] BSTR bstr);

        [propget, id(DISPID_IOEMESSAGE_DATE)] HRESULT date([retval, out] BSTR *pbstr);

        [propget, id(DISPID_IOEMESSAGE_URL)] HRESULT url([retval, out] BSTR *pbstr);

        [id(DISPID_IOEMESSAGE_SEND)] HRESULT send();
    }

    // ---------------------------------------------------------------------------------------
    // IID_IOEMsgList
    // ---------------------------------------------------------------------------------------
    [
        uuid(7dfa86b2-f4cc-11d1-ace1-00c04fa31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOEMsgList : IDispatch
    {
        [propput, id(DISPID_IOEMSGLIST_SORTCOL)] HRESULT sortColumn([in]BSTR bstr);
        [propget, id(DISPID_IOEMSGLIST_SORTCOL)] HRESULT sortColumn([retval, out]BSTR *pbstr);

        [propput, id(DISPID_IOEMSGLIST_SORTDIR)] HRESULT sortDirection([in]VARIANT_BOOL v);
        [propget, id(DISPID_IOEMSGLIST_SORTDIR)] HRESULT sortDirection([retval, out]VARIANT_BOOL *pv);

        [id(DISPID_IOEMSGLIST_TEST)] HRESULT test();

    }


    // ---------------------------------------------------------------------------------------
    // IID_IOEMessageCollection
    // ---------------------------------------------------------------------------------------
    [
        uuid(06BE731F-EF34-11d1-ACD8-00C04FA31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOEMessageCollection : IDispatch
    {
    [propput, id(DISPID_IOEMESSAGECOLLECTION_LENGTH)] HRESULT length([in] long v);
    [propget, id(DISPID_IOEMESSAGECOLLECTION_LENGTH)] HRESULT length([retval,out] long * p);
    [propget, id(DISPID_IOEMESSAGECOLLECTION__NEWENUM), hidden, restricted] HRESULT _newEnum([retval, out] IUnknown **p);
    [id(DISPID_IOEMESSAGECOLLECTION_ITEM)] HRESULT item([optional, in] VARIANT name,[optional, in] VARIANT index,[retval, out] IDispatch** pdisp);
    }

    // ---------------------------------------------------------------------------------------
    // IID_IOEFolderCollection
    // ---------------------------------------------------------------------------------------
    [
        uuid(06BE7320-EF34-11d1-ACD8-00C04FA31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOEFolderCollection : IDispatch
    {
    [propget, id(DISPID_IOEFOLDERCOLLECTION_LENGTH)] HRESULT length([retval,out] long * p);
    [propget, id(DISPID_IOEFOLDERCOLLECTION__NEWENUM), hidden, restricted] HRESULT _newEnum([retval, out] IUnknown **p);
    [id(DISPID_IOEFOLDERCOLLECTION_ITEM)] HRESULT item([optional, in] VARIANT name,[optional, in] VARIANT index,[retval, out] IDispatch** pdisp);
	[id(DISPID_IOEFOLDERCOLLECTION_ADD)] HRESULT add([in]BSTR bstrName, [retval, out]IDispatch **ppDisp);
	[propget, id(DISPID_IOEFOLDERCOLLECTION_FOLDERS)] HRESULT folders([retval, out]IOEFolderCollection **p);

    //[id(DISPID_IOEFOLDERCOLLECTION_SORT)] HRESULT sort(BSTR bstrCol, VARIANT_BOOL fAsc);
	//[id(DISPID_IOEFOLDERCOLLECTION_SORT)] HRESULT filter(BSTR bstrFilterExp);

    }


    // ---------------------------------------------------------------------------------------
    // IID_IOEFolder
    // ---------------------------------------------------------------------------------------
    [
        uuid(06BE7321-EF34-11d1-ACD8-00C04FA31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOEFolder : IDispatch
    {
        [propget, id(DISPID_IOEFOLDER_MESSAGES)] HRESULT messages([retval, out] IOEMessageCollection **p);
        [propget, id(DISPID_IOEFOLDER_FOLDERS)] HRESULT folders([retval, out] IOEFolderCollection **p);
        [propget, id(DISPID_IOEFOLDER_NAME)] HRESULT name([retval, out] BSTR *pbstr);
        [propput, id(DISPID_IOEFOLDER_NAME)] HRESULT name([in] BSTR bstr);
        [propget, id(DISPID_IOEFOLDER_SIZE)] HRESULT size([retval, out] LONG *pl);
        [propget, id(DISPID_IOEFOLDER_ID)] HRESULT id([retval, out] LONG *pl);
        [propget, id(DISPID_IOEFOLDER_UNREAD)] HRESULT unread([retval, out] LONG *pl);
        [propget, id(DISPID_IOEFOLDER_COUNT)] HRESULT count([retval, out] LONG *pl);
    }

    // ---------------------------------------------------------------------------------------
    // IID_IOESession
    // ---------------------------------------------------------------------------------------
    [
        uuid(06BE7322-EF34-11d1-ACD8-00C04FA31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOESession : IDispatch
    {
        [propget, id(DISPID_IOESESSION_FOLDERS)] HRESULT folders([retval, out] IOEFolderCollection **p);
        [propget, id(DISPID_IOESESSION_INBOX)] HRESULT inbox([retval, out] IOEFolder **p);

        [propget, id(DISPID_IOESESSION_VERSION)] HRESULT version([retval, out] BSTR *pbstr);

        [id(DISPID_IOESESSION_OPENFOLDER)] HRESULT openFolder([in] LONG idFolder, [retval, out] IOEFolder **p);
        [id(DISPID_IOESESSION_OPENMESSAGE)] HRESULT openMessage([in] LONG idFolder, LONG idMessage, [retval, out] IOEMessage **p);
        [id(DISPID_IOESESSION_CREATEMESSAGE)] HRESULT createMessage([retval, out] IOEMessage **ppNewMsg);
    }
    [
        uuid(06BE7323-EF34-11d1-ACD8-00C04FA31009),
        helpstring("Microsoft Outlook Express Session Object")
    ]
    coclass OESession
    {
    [default] interface IOESession;
    };
    [
        uuid(abc00000-0000-0000-0000-000000000000),
        helpstring("OEMsgTable")
    ]
    coclass OEMsgTable
    {
    [default] interface IUnknown;
    };

#endif

    // ---------------------------------------------------------------------------------------
    // IID_IOEAcctWizardOM
    // ---------------------------------------------------------------------------------------
    [
        uuid(61a81654-75fb-11d2-8c0e-00c04fa31009),
        odl,
        oleautomation,
        dual
    ]
    interface IOEAcctWizardOM : IDispatch
    {
        [id(DISPID_IOEACCTWIZ_SET_PROP_SZ)]             HRESULT setPropSz([in] BSTR bstrProp, [in] BSTR bstrVal);
        [id(DISPID_IOEACCTWIZ_GET_PROP_SZ)]             HRESULT getPropSz([in] BSTR bstrProp, [retval, out] BSTR *pbstrVal);
        [id(DISPID_IOEACCTWIZ_CLEAR_PROPS)]             HRESULT clearProps();
        [id(DISPID_IOEACCTWIZ_NEW_ACCOUNT)]             HRESULT createAccount(BSTR bstrINS);
        [id(DISPID_IOEACCTWIZ_CLOSE)]                   HRESULT close([in] VARIANT_BOOL fPrompt);
        [propget, id(DISPID_IOEACCTWIZ_WIDTH)]          HRESULT width([retval, out] LONG *pl);
        [propput, id(DISPID_IOEACCTWIZ_WIDTH)]          HRESULT width([in] LONG l);
        [propget, id(DISPID_IOEACCTWIZ_HEIGHT)]         HRESULT height([retval, out] LONG *pl);
        [propput, id(DISPID_IOEACCTWIZ_HEIGHT)]         HRESULT height([in] LONG l);
        [id(DISPID_IOEACCTWIZ_RELOAD)]                  HRESULT reload([in] BSTR bstr);
    }
};
