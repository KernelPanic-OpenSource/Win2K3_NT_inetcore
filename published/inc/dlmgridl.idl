//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//  Copyright 1995-1998 Microsoft Corporation. All Rights Reserved.
//
//--------------------------------------------------------------------------

cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// dlmgridl.h")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("// (C) Copyright 1999 Microsoft Corporation.  All Rights Reserved.")
cpp_quote("//")
cpp_quote("// THIS CODE AND INFORMATION IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF")
cpp_quote("// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO")
cpp_quote("// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A")
cpp_quote("// PARTICULAR PURPOSE.")
cpp_quote("//=--------------------------------------------------------------------------=")
cpp_quote("")
cpp_quote("#pragma comment(lib,\"uuid.lib\")")
cpp_quote("")
cpp_quote("//---------------------------------------------------------------------------=")
cpp_quote("// Lightweight User Profile Interfaces.")
cpp_quote("")
cpp_quote("// --------------------------------------------------------------------------------")
cpp_quote("// GUIDS")
cpp_quote("// --------------------------------------------------------------------------------")
cpp_quote("// {988934A4-064B-11D3-BB80-00104B35E7F9}")
cpp_quote("DEFINE_GUID(IID_IDownloadManager, 0x988934a4, 0x064b, 0x11d3, 0xbb, 0x80, 0x0, 0x10, 0x4b, 0x35, 0xe7, 0xf9);")

#ifndef DO_NO_IMPORTS
import "unknwn.idl";
import "ocidl.idl";
import "oleidl.idl";
import "oaidl.idl";
#endif

#include "winerror.h"

interface IDownloadManager;
[
    helpstring("IDownloadManager"),
    object,
    uuid(988934A4-064B-11D3-BB80-00104B35E7F9),	// IID_IDownloadManager
    dual,
    pointer_default(unique)
]
interface IDownloadManager : IDispatch
{
    [id(1)] HRESULT Start(  [in] IMoniker *pmk, [in] IBindCtx *pbc, [in] BSTR bstrSaveTo, [in] VARIANT_BOOL fSaveAs, [in] VARIANT_BOOL fSafe, 
    						[in] BSTR bstrHeaders, [in] LONG dwVerb, [in] LONG grfBINDF, [in] VARIANT *pbinfo, 
    						[in] BSTR bstrRedir, [in] LONG uiCP, [in] LONG dwAttempt);
    [id(2)] HRESULT StartURL([in] BSTR bstrURL, [in] VARIANT_BOOL fSaveAs, [in] BSTR bstrSaveTo, [in] IBindCtx *pbc, [in] VARIANT_BOOL fSafe, 
    						[in] BSTR bstrHeaders, [in] LONG dwVerb, [in] LONG grfBINDF, [in] VARIANT *pbinfo, 
    						[in] BSTR bstrRedir, [in] LONG uiCP, [in] LONG dwAttempt);
    [id(3)] HRESULT DownloadURL([in] BSTR bstrURL, [in] VARIANT_BOOL fSaveAs);
    [propget, id(4)] HRESULT eventlock([out, retval] VARIANT_BOOL *pfEventLock);
    [propput, id(4)] HRESULT eventlock([in] VARIANT_BOOL fEventLock);
    [id(5)] HRESULT CancelDownload([in] LONG lID);
    [id(6)] HRESULT SetState([in] LONG lID, [in] LONG lState);
    [id(7)] HRESULT StartPendingLaterDownloads();
};



