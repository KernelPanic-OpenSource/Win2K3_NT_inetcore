//------------------------------------------------------------------------------
//
// Copyright (C) Microsoft Corporation, 1999
//
//  FileName:       proctexe.idl
//
//  Description:    Intel's procedural textures released with IE4.
//
//  Change History:
//
//  1999/12/04  a-matcal    Created.
//
//------------------------------------------------------------------------------

import "oaidl.idl";
import "ocidl.idl";
import "dxtrans.idl";


//+-----------------------------------------------------------------------------
//
//  IDispAdditive interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DISPADDITIVE {
        DISPID_DISPADDITIVE_HARMONICS = 1,
        DISPID_DISPADDITIVE_NOISESCALE,
        DISPID_DISPADDITIVE_NOISEOFFSET,
        DISPID_DISPADDITIVE_TIMEX,
        DISPID_DISPADDITIVE_TIMEY,
        DISPID_DISPADDITIVE_SCALEX,
        DISPID_DISPADDITIVE_SCALEY,
        DISPID_DISPADDITIVE_SCALET,
        DISPID_DISPADDITIVE_ALPHA,
        DISPID_DISPADDITIVE_COLORKEY,
        DISPID_DISPADDITIVE_MASKMODE,
        DISPID_DISPADDITIVE_GENERATESEED,
        DISPID_DISPADDITIVE_BITMAPSEED
    } DISPID_DISPADDITIVE;

    [
        object,
        uuid(57FF5481-DCCA-11D0-B211-00A0C9191768),
        dual,
        helpstring("IDispAdditive Interface"),
        pointer_default(unique)
    ]
    interface IDispAdditive : IDispatch
    {
        [propget, id(DISPID_DISPADDITIVE_HARMONICS)]
            HRESULT Harmonics([out, retval] int * pnHarmonics);
        [propput, id(DISPID_DISPADDITIVE_HARMONICS)]
            HRESULT Harmonics([in] int nHarmonics);

        [propget, id(DISPID_DISPADDITIVE_NOISESCALE)]
            HRESULT NoiseScale([out, retval] int * pnNoiseScale);
        [propput, id(DISPID_DISPADDITIVE_NOISESCALE)]
            HRESULT NoiseScale([in] int nNoiseScale);

        [propget, id(DISPID_DISPADDITIVE_NOISEOFFSET)]
            HRESULT NoiseOffset([out, retval] int * pnNoiseOffset);
        [propput, id(DISPID_DISPADDITIVE_NOISEOFFSET)]
            HRESULT NoiseOffset([in] int nNoiseOffset);

        [propget, id(DISPID_DISPADDITIVE_TIMEX)]
            HRESULT TimeX([out, retval] int * pnTimeX);
        [propput, id(DISPID_DISPADDITIVE_TIMEX)]
            HRESULT TimeX([in] int nTimeX);

        [propget, id(DISPID_DISPADDITIVE_TIMEY)]
            HRESULT TimeY([out, retval] int * pnTimeY);
        [propput, id(DISPID_DISPADDITIVE_TIMEY)]
            HRESULT TimeY([in] int nTimeY);

        [propget, id(DISPID_DISPADDITIVE_SCALEX)]
            HRESULT ScaleX([out, retval] int * pnScaleX);
        [propput, id(DISPID_DISPADDITIVE_SCALEX)]
            HRESULT ScaleX([in] int nScaleX);

        [propget, id(DISPID_DISPADDITIVE_SCALEY)]
            HRESULT ScaleY([out, retval] int * pnScaleY);
        [propput, id(DISPID_DISPADDITIVE_SCALEY)]
            HRESULT ScaleY([in] int nScaleY);

        [propget, id(DISPID_DISPADDITIVE_SCALET)]
            HRESULT ScaleT([out, retval] int * pnScaleT);
        [propput, id(DISPID_DISPADDITIVE_SCALET)]
            HRESULT ScaleT([in] int nScaleT);

        [propget, id(DISPID_DISPADDITIVE_ALPHA)]
            HRESULT Alpha([out, retval] int * pnAlpha);
        [propput, id(DISPID_DISPADDITIVE_ALPHA)]
            HRESULT Alpha([in] int nAlpha);

        [propget, id(DISPID_DISPADDITIVE_COLORKEY)]
            HRESULT ColorKey([out, retval] int * pnColorKey);
        [propput, id(DISPID_DISPADDITIVE_COLORKEY)]
            HRESULT ColorKey([in] int nColorKey);

        [propget, id(DISPID_DISPADDITIVE_MASKMODE)]
            HRESULT MaskMode([out, retval] int * pnMaskMode);
        [propput, id(DISPID_DISPADDITIVE_MASKMODE)]
            HRESULT MaskMode([in] int nMaskMode);

        [propget, id(DISPID_DISPADDITIVE_GENERATESEED)]
            HRESULT GenerateSeed([out, retval] int * pnSeed);
        [propput, id(DISPID_DISPADDITIVE_GENERATESEED)]
            HRESULT GenerateSeed([in] int nSeed);

        [propget, id(DISPID_DISPADDITIVE_BITMAPSEED)]
            HRESULT BitmapSeed([out, retval] BSTR * pbstrBitmapSeed);
        [propput, id(DISPID_DISPADDITIVE_BITMAPSEED)]
            HRESULT BitmapSeed([in] BSTR bstrBitmapSeed);
    };


//+-----------------------------------------------------------------------------
//
//  IDispDistortion interface
//
//------------------------------------------------------------------------------

    typedef enum DISPID_DISPDISTORTION {
        DISPID_DISPDISTORTION_HARMONICS = 1,
        DISPID_DISPDISTORTION_NOISESCALEU,
        DISPID_DISPDISTORTION_NOISESCALEV,
        DISPID_DISPDISTORTION_NOISEOFFSETU,
        DISPID_DISPDISTORTION_MOISEOFFSETV,
        DISPID_DISPDISTORTION_TIMEUX,
        DISPID_DISPDISTORTION_TIMEUY,
        DISPID_DISPDISTORTION_TIMEVX,
        DISPID_DISPDISTORTION_TIMEVY,
        DISPID_DISPDISTORTION_SCALEUX,
        DISPID_DISPDISTORTION_SCALEUY,
        DISPID_DISPDISTORTION_SCALEUT,
        DISPID_DISPDISTORTION_SCALEVX,
        DISPID_DISPDISTORTION_SCALEVY,
        DISPID_DISPDISTORTION_SCALEVT
    } DISPID_DISPDISTORTION;

    [
        object,
        uuid(57FF5485-DCCA-11D0-B211-00A0C9191768),
        dual,
        helpstring("IDispDistortion Interface"),
        pointer_default(unique)
    ]
    interface IDispDistortion : IDispatch
    {
        [propget, id(DISPID_DISPDISTORTION_HARMONICS)]
            HRESULT Harmonics([out, retval] int * pnHarmonics);
        [propput, id(DISPID_DISPDISTORTION_HARMONICS)]
            HRESULT Harmonics([in] int nHarmonics);

        [propget, id(DISPID_DISPDISTORTION_NOISESCALEU)]
            HRESULT NoiseScaleU([out, retval] int * pnNoiseScaleU);
        [propput, id(DISPID_DISPDISTORTION_NOISESCALEU)]
            HRESULT NoiseScaleU([in] int nNoiseScaleU);

        [propget, id(DISPID_DISPDISTORTION_NOISESCALEV)]
            HRESULT NoiseScaleV([out, retval] int * pnNoiseScaleV);
        [propput, id(DISPID_DISPDISTORTION_NOISESCALEV)]
            HRESULT NoiseScaleV([in] int nNoiseScaleV);

        [propget, id(DISPID_DISPDISTORTION_NOISEOFFSETU)]
            HRESULT NoiseOffsetU([out, retval] int * pnNoiseOffsetU);
        [propput, id(DISPID_DISPDISTORTION_NOISEOFFSETU)]
            HRESULT NoiseOffsetU([in] int nNoiseOffsetU);

        [propget, id(DISPID_DISPDISTORTION_MOISEOFFSETV)]
            HRESULT NoiseOffsetV([out, retval] int * pnNoiseOffsetV);
        [propput, id(DISPID_DISPDISTORTION_MOISEOFFSETV)]
            HRESULT NoiseOffsetV([in] int nNoiseOffsetV);

        [propget, id(DISPID_DISPDISTORTION_TIMEUX)]
            HRESULT TimeUX([out, retval] int * pnTimeUX);
        [propput, id(DISPID_DISPDISTORTION_TIMEUX)]
            HRESULT TimeUX([in] int nTimeUX);

        [propget, id(DISPID_DISPDISTORTION_TIMEUY)]
            HRESULT TimeUY([out, retval] int * pnTimeUY);
        [propput, id(DISPID_DISPDISTORTION_TIMEUY)]
            HRESULT TimeUY([in] int nTimeUY);

        [propget, id(DISPID_DISPDISTORTION_TIMEVX)]
            HRESULT TimeVX([out, retval] int * pnTimeVX);
        [propput, id(DISPID_DISPDISTORTION_TIMEVX)]
            HRESULT TimeVX([in] int nTimeVX);

        [propget, id(DISPID_DISPDISTORTION_TIMEVY)]
            HRESULT TimeVY([out, retval] int * pnTimeVY);
        [propput, id(DISPID_DISPDISTORTION_TIMEVY)]
            HRESULT TimeVY([in] int nTimeVY);

        [propget, id(DISPID_DISPDISTORTION_SCALEUX)]
            HRESULT ScaleUX([out, retval] int * pnScaleUX);
        [propput, id(DISPID_DISPDISTORTION_SCALEUX)]
            HRESULT ScaleUX([in] int nScaleUX);

        [propget, id(DISPID_DISPDISTORTION_SCALEUY)]
            HRESULT ScaleUY([out, retval] int * pnScaleUY);
        [propput, id(DISPID_DISPDISTORTION_SCALEUY)]
            HRESULT ScaleUY([in] int nScaleUY);

        [propget, id(DISPID_DISPDISTORTION_SCALEUT)]
            HRESULT ScaleUT([out, retval] int * pnScaleUT);
        [propput, id(DISPID_DISPDISTORTION_SCALEUT)]
            HRESULT ScaleUT([in] int nScaleUT);

        [propget, id(DISPID_DISPDISTORTION_SCALEVX)]
            HRESULT ScaleVX([out, retval] int * pnScaleVX);
        [propput, id(DISPID_DISPDISTORTION_SCALEVX)]
            HRESULT ScaleVX([in] int nScaleVX);

        [propget, id(DISPID_DISPDISTORTION_SCALEVY)]
            HRESULT ScaleVY([out, retval] int * pnScaleVY);
        [propput, id(DISPID_DISPDISTORTION_SCALEVY)]
            HRESULT ScaleVY([in] int nScaleVY);

        [propget, id(DISPID_DISPDISTORTION_SCALEVT)]
            HRESULT ScaleVT([out, retval] int * pnScaleVT);
        [propput, id(DISPID_DISPDISTORTION_SCALEVT)]
            HRESULT ScaleVT([in] int nScaleVT);
    };


[
    uuid(35CA7A28-2B58-4FA6-A2D7-B843E60D0AC4),
    version(1.0),
    helpstring("proctexe 1.0 Type Library")
]
library PROCTEXELib
{
    importlib("stdole2.tlb");

//+-----------------------------------------------------------------------------
//
//  DispAdditive class
//
//------------------------------------------------------------------------------

    [
        uuid(BDD307C3-7BC0-4542-9F8F-A9611FE6C1BF),
        helpstring("DispAdditive Class")
    ]
    coclass DispAdditive
    {
        [default] interface IDispAdditive;
    };


//+-----------------------------------------------------------------------------
//
//  DispAdditive property page
//
//------------------------------------------------------------------------------

    [
        uuid(6BDC90AE-0026-4e9d-93C4-090FEC6B5A64),
        helpstring("DispAdditive Property Page")
    ]
    coclass DispAdditivePP
    {
        interface IUnknown;
    };
};
