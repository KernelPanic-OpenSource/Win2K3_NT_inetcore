//+-----------------------------------------------------------------------------
//
//  Copyright (c) 1998 Microsoft Corporation
//
//  Overview:
//      Interface definitions for Timing Engine components.
//
//------------------------------------------------------------------------------

import "mstime.idl";

cpp_quote("HRESULT TECreateBehavior(BSTR id, ITIMENode **ppOut);")
cpp_quote("HRESULT TECreateTimeline(BSTR id, ITIMEContainer **ppOut);")
cpp_quote("HRESULT TECreatePlayer(BSTR id, IUnknown * bvr, IServiceProvider * sp, ITIMENodeMgr **ppOut);")

cpp_quote("#define TE_UNDEFINED_VALUE (-1)")

interface ITIMENode;
interface ITIMENodeBehavior;
interface ITIMENodeBehaviorSite;
interface ITIMENodeMgr;

//+-----------------------------------------------------------------------------
//
//  ITIMENode
//
//------------------------------------------------------------------------------

    typedef enum _TE_TIMEPOINT {
        TE_TIMEPOINT_NONE  = 0,
        TE_TIMEPOINT_BEGIN = 1,
        TE_TIMEPOINT_END   = 2,
        TE_TIMEPOINT_Max   = 0x7fffffffL
    } TE_TIMEPOINT;

    typedef enum _TE_FLAGS {
        TE_FLAGS_LOCKED      = 0x00000001,
        TE_FLAGS_MASTER      = 0x00000002,
        TE_FLAGS_ENDSYNC     = 0x00000004,

        TE_FLAGS_Max    = 0x7fffffffL
    } TE_FLAGS;

    typedef enum _TE_FILL_FLAGS {
        TE_FILL_REMOVE = 0,
        TE_FILL_FREEZE = 1,

        TE_FILL_Max    = 0x7fffffffL
    } TE_FILL_FLAGS;

    typedef enum _TE_RESTART_FLAGS {
        TE_RESTART_ALWAYS             = 0,
        TE_RESTART_NEVER              = 1,
        TE_RESTART_WHEN_NOT_ACTIVE    = 2,

        TE_RESTART_Max                = 0x7fffffffL
    } TE_RESTART_FLAGS;

    typedef enum _TE_STATE
    {
        TE_STATE_ACTIVE     = 0x00000000,
        TE_STATE_INACTIVE   = 0x00000001,
        TE_STATE_PAUSED     = 0x00000002,
        TE_STATE_Max        = 0x7fffffffL
    } TE_STATE;

    typedef enum _TE_UPDATE_FLAGS {
        TE_UPDATE_PROPAGATE  = 0x00000001,
        TE_UPDATE_NOTIFY     = 0x00000002,
        TE_UPDATE_Max        = 0x7fffffffL
    } TE_UPDATE_FLAGS;

    [
        object,
        uuid(85918f51-2e04-4636-8b12-084f92a1b3e0),
        pointer_default(unique)
    ]
    interface ITIMENode : IUnknown
    {
        //
        // Pure attributes set by the user
        //

        [propget] HRESULT id([out, retval] BSTR *);
        [propput] HRESULT id([in] BSTR);
    
        [propget] HRESULT dur([out, retval] double *);
        [propput] HRESULT dur([in] double);
    
        [propget] HRESULT repeatCount([out, retval] double *);
        [propput] HRESULT repeatCount([in] double);
    
        [propget] HRESULT repeatDur([out, retval] double *);
        [propput] HRESULT repeatDur([in] double);

        [propget] HRESULT fill([out, retval] TE_FILL_FLAGS *);
        [propput] HRESULT fill([in] TE_FILL_FLAGS);
    
        [propget] HRESULT autoReverse([out, retval] VARIANT_BOOL *);
        [propput] HRESULT autoReverse([in] VARIANT_BOOL);
    
        [propget] HRESULT speed([out, retval] float *);
        [propput] HRESULT speed([in] float);

        [propget] HRESULT accelerate([out, retval] float *);
        [propput] HRESULT accelerate([in] float);

        [propget] HRESULT decelerate([out, retval] float *);
        [propput] HRESULT decelerate([in] float);

        [propget] HRESULT flags([out, retval] DWORD *);
        [propput] HRESULT flags([in] DWORD);

        [propget] HRESULT restart([out, retval] TE_RESTART_FLAGS *);
        [propput] HRESULT restart([in] TE_RESTART_FLAGS);
    
        // This is the natural duration for the current repeat iteration.
        // It will not force a recalc but will allow a repeat time (or end
        // time) to be calculated if the original dur was infinite.
    
        [propget] HRESULT naturalDur([out, retval] double *);
        [propput] HRESULT naturalDur([in] double);

        //
        // Begin
        //
    
        HRESULT addBegin([in] double dblParentTime,
                         [out, retval] LONG * cookie);
        HRESULT addBeginSyncArc([in] ITIMENode * node,
                                [in] TE_TIMEPOINT tep,
                                [in] double dblOffset,
                                [out, retval] LONG * cookie);
        // If you specify 0 then we will remove everything
        HRESULT removeBegin([in] LONG cookie);

        HRESULT beginAt([in] double dblParentTime);

        //
        // End
        //

        HRESULT addEnd([in] double dblParentTime,
                       [out, retval] LONG * cookie);
        HRESULT addEndSyncArc([in] ITIMENode * node,
                              [in] TE_TIMEPOINT tep,
                              [in] double dblOffset,
                              [out, retval] LONG * cookie);
        // If you specify 0 then we will remove everything
        HRESULT removeEnd([in] LONG cookie);

        HRESULT endAt([in] double dblParentTime);

        //
        HRESULT pause();
        HRESULT resume();

        //
        HRESULT enable();
        HRESULT disable();
    
        //
        HRESULT seekSegmentTime([in] double dblSegmentTime);
        HRESULT seekActiveTime([in] double dblActiveTime);
        HRESULT seekTo([in] LONG lRepeatCount, [in] double dblSegmentTime);
    
        //
        // Calculated values
        //

        //
        // These are read-only attributes
        //
    
        // This is the current segment time of the node.
        [propget] HRESULT currSimpleTime([out, retval] double * d);
    
        // This is the number of times the node has repeated
        [propget] HRESULT currRepeatCount([out, retval] LONG * l);

        // This is the current segment time of the node.
        [propget] HRESULT currSegmentTime([out, retval] double * d);
    
        // This is the amount of elapsed active time (or active time)
        [propget] HRESULT currActiveTime([out, retval] double * d);

        // This is the current segment duration
        [propget] HRESULT currSegmentDur([out, retval] double * d);

        // This is the implicit duration of the node
        [propget] HRESULT currImplicitDur([out, retval] double * d);

        // This is the current simple duration
        [propget] HRESULT currSimpleDur([out, retval] double * d);

        // This is the amount of elapsed active time (or active time)
        [propget] HRESULT currProgress([out, retval] double * d);

        // This is the current speed of our simple time
        // Currently this does not take into account accel/decel
        [propget] HRESULT currSpeed([out, retval] float * speed);
    
        // This is the time on the parents timeline at which the node
        // will or already has begun.  If it is infinite then the begin
        // time is unknown
        // This is in posttransformed parent time.
        [propget] HRESULT beginParentTime([out, retval] double * d);
    
        // This is the time on the parents timeline at which the node
        // will or already has ended.  If it is infinite then the end
        // time is unknown.
        // This is in posttransformed parent time.
        [propget] HRESULT endParentTime([out, retval] double * d);
    
        // This is the total time during which the element is active.
        // This does not include fill time which extends past the active
        // duration.
        [propget] HRESULT activeDur([out, retval] double *);

        // This is the parent's time when the last tick occurred (when it
        // was currTime)
        [propget] HRESULT currParentTime([out, retval] double * d);

        // This will return whether the node is active.  This will be
        // false if the node is in the fill period
        [propget] HRESULT isActive([out, retval] VARIANT_BOOL * b);

        // This will return true if the node is active or in the fill period
        [propget] HRESULT isOn([out, retval] VARIANT_BOOL * b);

        // This will return whether node itself has been paused explicitly
        [propget] HRESULT isPaused([out, retval] VARIANT_BOOL * b);

        // This will return whether node has been paused explicitly or
        // because its parent was paused
        [propget] HRESULT isCurrPaused([out, retval] VARIANT_BOOL * b);

        // This will return whether node itself has been disabled explicitly
        [propget] HRESULT isDisabled([out, retval] VARIANT_BOOL * b);

        // This will return whether node has been disabled explicitly or
        // because its parent was disabled
        [propget] HRESULT isCurrDisabled([out, retval] VARIANT_BOOL * b);

        // This will return the detailed state flags
        [propget] HRESULT stateFlags([out, retval] TE_STATE * lFlags);

        //
        // Methods
        //
    
        HRESULT reset();

        // This will update the attributes and propagate to the media
        // leaves.
        HRESULT update([in] DWORD dwFlags);

        HRESULT documentTimeToParentTime([in] double dblDocumentTime,
                                         [out, retval] double * pdblParentTime);
        HRESULT parentTimeToDocumentTime([in] double dblParentTime,
                                         [out, retval] double * pdblDocumentTime);
        HRESULT parentTimeToActiveTime([in] double dblParentTime,
                                       [out, retval] double * pdblActiveTime);
        HRESULT activeTimeToParentTime([in] double dblActiveTime,
                                       [out, retval] double * pdblParentTime);
        HRESULT activeTimeToSegmentTime([in] double dblActiveTime,
                                       [out, retval] double * pdblSegmentTime);
        HRESULT segmentTimeToActiveTime([in] double dblSegmentTime,
                                       [out, retval] double * pdblActiveTime);
        HRESULT simpleTimeToSegmentTime([in] double dblSimpleTime,
                                        [out, retval] double * pdblSegmentTime);
        HRESULT segmentTimeToSimpleTime([in] double dblSegmentTime,
                                        [out, retval] double * pdblSimpleTime);

        HRESULT addBehavior([in] ITIMENodeBehavior * tnb);
        HRESULT removeBehavior([in] ITIMENodeBehavior * tnb);
    };


//+-----------------------------------------------------------------------------
//
//  ITIMENodeBehavior
//
//------------------------------------------------------------------------------

    typedef enum _TE_EVENT_TYPE
    {
        TE_EVENT_BEGIN             = 0,
        TE_EVENT_END               = 1,
        TE_EVENT_REPEAT            = 2,
        TE_EVENT_AUTOREVERSE       = 3,
        TE_EVENT_PAUSE             = 4,
        TE_EVENT_RESUME            = 5,
        TE_EVENT_RESET             = 6,
        TE_EVENT_SEEK              = 7,
        TE_EVENT_UPDATE            = 8,
        TE_EVENT_PARENT_TIMESHIFT  = 9,
        TE_EVENT_ENABLE            = 10,
        TE_EVENT_DISABLE           = 11,
        TE_EVENT_Max           = 0x7fffffffL
    } TE_EVENT_TYPE;

    typedef enum _TE_PROPERTY_TYPE
    {
        TE_PROPERTY_TIME             = 0x00000001,
        TE_PROPERTY_REPEATCOUNT      = 0x00000002,
        TE_PROPERTY_SEGMENTDUR       = 0x00000004,
        TE_PROPERTY_IMPLICITDUR      = 0x00000008,
        TE_PROPERTY_SIMPLEDUR        = 0x00000010,
        TE_PROPERTY_ACTIVEDUR        = 0x00000020,
        TE_PROPERTY_PROGRESS         = 0x00000040,
        TE_PROPERTY_SPEED            = 0x00000080,
        TE_PROPERTY_BEGINPARENTTIME  = 0x00000100,
        TE_PROPERTY_ENDPARENTTIME    = 0x00000200,
        TE_PROPERTY_ISACTIVE         = 0x00000400,
        TE_PROPERTY_ISON             = 0x00000800,
        TE_PROPERTY_ISPAUSED         = 0x00001000,
        TE_PROPERTY_ISCURRPAUSED     = 0x00002000,
        TE_PROPERTY_STATEFLAGS       = 0x00004000,
        TE_PROPERTY_ISDISABLED       = 0x00008000,
        TE_PROPERTY_ISCURRDISABLED   = 0x00010000,
        TE_PROPERTY_Max              = 0x7fffffffL
    } TE_PROPERTY_TYPE;

    [
        object,
        uuid(53d94c9f-5a20-4701-a36b-d9cb58751b97),
        pointer_default(unique)
    ]
    interface ITIMENodeBehavior : IUnknown
    {
        HRESULT tick();

        HRESULT eventNotify([in] double dblEventTime,
                         [in] TE_EVENT_TYPE teEventType,
                         [in] long lNewRepeatCount);
        HRESULT getSyncTime([out] double * dblNewSegmentTime,
                            [out] LONG * lNewRepeatCount,
                            [out] VARIANT_BOOL * bCueing);
        HRESULT propNotify([in] DWORD tePropTypes);
    };


//+-----------------------------------------------------------------------------
//
//  ITIMEContainer
//
//------------------------------------------------------------------------------

    typedef enum _TE_ENDSYNC
    {
        TE_ENDSYNC_NONE    = 0,
        TE_ENDSYNC_FIRST   = 1,
        TE_ENDSYNC_LAST    = 2,
        TE_ENDSYNC_ALL     = 3,
        TE_ENDSYNC_MEDIA   = 4,
        TE_ENDSYNC_Max     = 0x7fffffffL,
    } TE_ENDSYNC;

    [
        object,
        uuid(bea46abf-f895-4f15-80fd-8dec9d6558ec),
        pointer_default(unique)
    ]
    interface ITIMEContainer : IUnknown
    {
        HRESULT addNode([in] ITIMENode * tn);
        HRESULT removeNode([in] ITIMENode * tn);

        [propget] HRESULT numChildren([out, retval] long * l);

        [propget] HRESULT endSync([out, retval] TE_ENDSYNC * endsync);
        [propput] HRESULT endSync([in] TE_ENDSYNC endsync);
    };


//+-----------------------------------------------------------------------------
//
//  ITIMENodeMgr
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(bc5a60be-0fea-443a-95ae-a3e4c9715c88),
        pointer_default(unique)
    ]
    interface ITIMENodeMgr : IUnknown
    {
        [propget] HRESULT id([out, retval] BSTR *);
        [propput] HRESULT id([in] BSTR);
    
        HRESULT begin();
        HRESULT end();
        HRESULT pause();
        HRESULT resume();
        HRESULT seek([in] double dblTime);
    
        [propget] HRESULT currTime([out, retval] double * pdblTime);

        [propget] HRESULT node([out, retval] ITIMENode ** pptn);

        [propget] HRESULT stateFlags([out, retval] TE_STATE * lFlags);
    
        HRESULT tick([in] double dblTime);
    };


//+-----------------------------------------------------------------------------
//
//  ITIMEInternalEventSink
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(816d8132-dbae-48ee-a99d-f15fad645cc4),
        pointer_default(unique)
    ]
    interface ITIMEImageRender : IUnknown
    {
        HRESULT PutDirectDraw(IUnknown * punkDirectDraw);
        HRESULT Render(HDC hdc, LPRECT pRect, LONG lFrameNum);
        HRESULT GetSize(DWORD * pdwWidth, DWORD * pdwHeight);
        HRESULT NeedNewFrame([in]  double           dblNewTime, 
                             [in]  LONG             lOldFrame, 
                             [out] LONG *           plNewFrame, 
                             [out] VARIANT_BOOL *   pvb, 
                             [in]  double           dblClipBegin, 
                             [in]  double           dblClipEnd);
        HRESULT GetDuration([out]  double *         pdblDuration);
        HRESULT GetRepeatCount([out] double * pdblRepeatCount);
    };


//+-----------------------------------------------------------------------------
//
//  ITIMEInternalEventSink
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(c9136c4d-d1f6-44d2-b7a9-8b48ed08979d),
        pointer_default(unique)
    ]
    interface ITIMEInternalEventSink : IUnknown
    {
        HRESULT InternalEvent();
    };


//+-----------------------------------------------------------------------------
//
//  ITIMEInternalEventGenerator
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(9e3f5bbf-c5c6-4a56-ad53-1fa5c8c2a69f),
        pointer_default(unique)
    ]
    interface ITIMEInternalEventGenerator : IUnknown
    {
        HRESULT AddInternalEventSink(ITIMEInternalEventSink * pSink, double dblTime);
        HRESULT RemoveInternalEventSink(ITIMEInternalEventSink * pSink);
    };


//+-----------------------------------------------------------------------------
//
//  ITIMETransitionDependencyMgr
//
//------------------------------------------------------------------------------

    [
        object,
        uuid(FCD84C84-3878-4FD8-BE54-6B4E1AC248F9),
        helpstring("ITIMETransitionDependencyMgr Interface"),
        pointer_default(unique),
        local
    ]
    interface ITIMETransitionDependencyMgr : IUnknown
    {
        HRESULT EvaluateTransitionTarget(IUnknown * punkTransitionTarget,
                                         void * pvTransitionDependencyMgr);
    };

