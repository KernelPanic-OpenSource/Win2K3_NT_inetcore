; AutoExp.Dat - templates for automaticially expanding data
; Copyright(c) 1997 Microsoft Corporation. All Rights Reserved.
;---------------------------------------------------------------
;
; While debugging, Data Tips and items in the Watch and Variable
; windows are automatically expanded to show their most important
; elements. The expansion follows the format given by the rules
; in this file. You can add rules for your types or change the
; predefined rules.
;
; For good examples, read the rules in this file.
;
; To find what the debugger considers the type of a variable to
; be, add it to the Watch window and right-click and select
; Properties.
;
; An AutoExpand rule is a line with the name of a type, an equals 
; sign, and text with replaceable parts in angle brackets. The 
; part in angle brackets names a member of the type and an 
; optional Watch format specifier.
;
; AutoExpand rules use the following syntax. The equals sign (=), 
; angle brackets (<>), and comma are taken literally. Square
; brackets ([]) indicate optional items.
;
; type=[text]<member[,format]>...
;
; type      Name of the type (may be followed by <*> for template
;           types such as the ATL types listed below).
;
; text      Any text.Usually the name of the member to display, 
;           or a shorthand name for the member.
;
; member    Name of a member to display.
;
; format    Watch format specifier. One of the following:
;
;   Letter  Description                 Sample         Display
;   ------  --------------------------  ------------   -------------
;   d,i     Signed decimal integer      0xF000F065,d   -268373915
;   u       Unsigned decimal integer    0x0065,u       101
;   o       Unsigned octal integer      0xF065,o       0170145
;   x,X     Hexadecimal integer         61541,X        0X0000F065
;   l,h     long or short prefix for    00406042,hx    0x0c22
;             d, i, u, o, x, X
;   f       Signed floating-point       3./2.,f        1.500000
;   e       Signed scientific-notation  3./2.,e        1.500000e+000
;   g       Shorter of e and f          3./2.,g        1.5
;   c       Single character            0x0065,c       'e'
;   s       Zero-terminated string      0x0012fde8,s   "Hello world"
;   su      Unicode string              0x007200c4,su  "Hello world"
;   st      String in ANSI or Unicode depending on current setting
;
; The special format <,t> specifies the name of the most-derived 
; type of the object. This is especially useful with pointers or
; references to a base class.
;
; If there is no rule for a class, the base classes are checked for
; a matching rule.
;
; -------
; Unicode
; -------
;
; If your application is built for Unicode, you'll want Unicode 
; strings to automatically expand as text, rather than arrays of 
; unsigned short.  To automatically display Unicode strings as 
; text, go to Tools/Options/Debug tab and check 'Display Unicode
; strings'.
;
;---------------------------------------------------------------
[AutoExpand]

; from windef.h
tagPOINT =x=<x> y=<y>
tagRECT =left=<left> top=<top> right=<right> bottom=<bottom>

; Trident stuff

; Tree Stuff
CTreePos = TreePos SN=<_nSerialNumber,d> type=< _cElemLeftAndFlags & 0xf>
CTreeNode = TreeNode SN=<_nSerialNumber,d> tag=<_etagDbg>
CElement =<,t> SN=<_nSerialNumber,d> tag=<_etagDbg>
CMarkup =<,t> url=<_pLocationContextDbg->_pchUrl,su> _ulRefs=<_ulRefs,u> _ulAllRefs=<_ulAllRefsAndFlags,x>

_POINTL =x=<x> y=<y>
_RECTL =left=<left> top=<top> rt=<right> bot=<bottom>
tagSIZE =cx=<cx> cy=<cy>
tagSIZEL =cx=<cx> cy=<cy>
tagSIZEF =cx=<cx,f> cy=<cy,f>
METHODINFO =dispid=<dispid,d> cbArg=<cbArgSize>
PROP_DESC =wpif=<wpif> name=<pszName,su>
CBase =<,t> _ulRefs=<_ulRefs,u> _ulAllRefs=<_ulAllRefsAndFlags,x>
CServer =<,t> _state=<_state,u>
CCommonAttrBag =<,t> class=<_cstrCLASS._pch,su>
CStr =str=<_pch,su>
CErrorInfo =hr=<_hr>
CImplAry =<,t> num_elems=<_c,u>
COleSiteConcrete =<,t> _state=<_state,u> name=<_TBag._cstrName._pch,su>
CUndoPropChange =type=<_wpiType> id=<_dispid>
CMessage =htc=<htc> msg=<message,x> rslt=<lresult>
CSelectionRecord =<,t> cSelcted=<_arySitesSelected._c>
CTagDesc =tag=<_tag> name=<_szTagName>
CUnitValue =val=<_lValue> actVal=<_lValue/16>
CColorValue =val=<_dwValue> actVal=<_dwValue & 0xffffff>
CHtmlTag =etag=<_etag>
CRunPtrBase =<,t> _iRun=<__iRun,u> _ich=<__ich,u>
CLSMeasurer =<,t> _cp=<_cp,u> _ptp=(<_ptpCurrent->_nSerialNumber,d>, type=<_ptpCurrent->_cElemLeftAndFlags&0xf, u>)
CLine = <,t> cch=<_cch> _LM=<_xLeftMargin> _XL=<_xLeft> _XW=<_xWidth> _YH=<_yHeight> _BS=<_yBeforeSpace>
CLayout = <,t> Element: SN= <_pElementOwner->_nSerialNumber>, tag=<_pElementOwner->_etagDbg>
CLineArray =<,t> size=<_cel>

; OLE Stuff
_GUID =<Data1,lx>-<Data2,hx>-<Data3,hx>-...
tagVARIANT =vt=<vt> val=<lVal,lx>
tagDISPPARAMS =cArgs=<cArgs> cNamed=<cNamedArgs>
tagEXCEPINFO =code=<wCode>
tagFUNCDESC =memid=<memid> kind=<funckind>
tagVARDESC =memid=<memid> kind=<varkind>
tagCY =Hi=<Hi> Lo=<Lo>

; display stuff
CSize =cx=<cx,i> cy=<cy,i>
CPoint =x=<x,i> y=<y,i>
CRect =l=<left,i> t=<top,i> r=<right,i> b=<bottom,i>
CRegion =l=<_rc.left,i> t=<_rc.top,i> r=<_rc.right,i> b=<_rc.bottom,i>
CDispNode = <,t> flags=<_flags,lX>

; DXTransforms stuff
DXBASESAMPLE =a=<Alpha,x> r=<Red,x> g=<Green,x> b=<Blue,x>
DXBND =min=<Min,i> max=<Max,i>
DXBNDS =l=<u.D[0].Min,i> r=<u.D[0].Max,i> t=<u.D[1].Min,i> b=<u.D[1].Max,i> type=<eType>
DXVEC =x=<u.D[0],i> y=<u.D[1],i> z=<u.D[2],i> t=<u.D[3],i> type=<eType>

; from winuser.h
tagMSG =msg=<message,x> wp=<wParam,x> lp=<lParam,x>

; from afxwin.h
CDC =hDC=<m_hDC> attrib=<m_hAttribDC>
CPaintDC =<,t> hWnd=<m_hWnd>
CPoint =x=<x> y=<y>
CRect =left=<left> top=<top> right=<right> bottom=<bottom>
CSize =cx=<cx> cy=<cy>
CWnd =<,t> hWnd=<m_hWnd>
CWinApp =<,t> <m_pszAppName,s>
CWinThread =<,t> h=<m_hThread> proc=<m_pfnThreadProc>

; from afxcoll.h
CPtrList =cnt=<m_nCount>

; from afxstat_.h
CProcessLocalObject =<,t>
CThreadLocalObject =<,t>

; from afx.h
CArchiveException =cause=<m_cause>
CFile =hFile=<m_hFile> name=<m_strFileName.m_pchData,s>
CFileException =cause=<m_cause> OS Error=m_lOsError
CMemFile =pos=<m_nPosition> size=<m_nFileSize>
CObject =<,t>
CRuntimeClass =<m_lpszClassName,s>
CStdioFile =FILE*=<m_pStream> name=<m_strFilename.m_pchData,s>
CString =<m_pchData,st>
CTimeSpan =time=<m_time>
CTime =time=<m_time>

; from afxcoll.h
CByteArray =count=<m_nCount>
CStringList =count=<m_nCount>
; same for all CXXXArray classes
; same for CXXXList
; same for CMapXXToXX

; new for VC98
_com_error=<m_hresult,hr>
_bstr_t=<m_Data->m_wstr,su> (<m_Data->m_RefCount,u>)
_com_ptr_t<*>=<m_pInterface>
_LARGE_INTEGER=<QuadPart>
ATL::CComPtr<*>=<p>
ATL::CComBSTR=<m_str,su>
ATL::CComQIPtr<*>=<p>
std::basic_string<*>=<_Ptr>

; new for VC98 using built-ins
tagVARIANT=$BUILTIN(VARIANT)
VARIANT=$BUILTIN(VARIANT)
_GUID=$BUILTIN(GUID)

[Unicode]
DisplayUnicode=1
