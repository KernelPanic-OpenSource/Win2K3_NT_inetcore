//////////////////////////////////////////////////////////////////////
// File:  StressInstance.h
//
// Copyright (c) 2001 Microsoft Corporation.  All Rights Reserved.
//
// Purpose:
//	StressInstance.h: interface for the StressInstance class.
//	This class is used spawn and monitor instances of the stressEXE app.
//
// History:
//	02/15/01	DennisCh	Created
//
//////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////
// Includes
//////////////////////////////////////////////////////////////////////

//
// WIN32 headers
//
#define UNICODE
#define _UNICODE

#include <stdio.h>
#include <windows.h>
#include <tchar.h>
#include <winhttp.h>

//
// Project headers
//
#include <debugger.h>

//////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_STRESSINSTANCE_H__806226FB_2170_4FE3_ACCA_EF8952E6A524__INCLUDED_)
#define AFX_STRESSINSTANCE_H__806226FB_2170_4FE3_ACCA_EF8952E6A524__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


#define	RESPONSE_HEADER__STRESS_BEGIN			_T("WinHttpStress_Begin: Begin Stress")
#define	RESPONSE_HEADER__STRESS_END				_T("WinHttpStress_End: End Stress")


// ***************************
// ** max string URL length
#define MAX_STRESS_URL							MAX_PATH * 2


// ***************************
// ** time to check the stress exe in milliseconds
#define STRESSINSTANCE_MONITOR_EXE_TIME			600000	// 10 minutes

// ***************************
// ** Command line CreateProcess will use.
#define STRESSINSTANCE_DEBUG_COMMANDLINE		_T("\"%s\"")

// ***************************
// ** Command line CreateProcess will use for logging memory dump file info
/*
//	loragent switches
//				/d uncpathdumpfilename
//				/k kill switch 
//				/a addinfo1|addinfo2
//				/m WinHTTP Debug
//
//	Parameters we use:
//		/d <DUMP_FILE_PATH> /a <StressInstanceRunID>
*/
#define STRESSINSTANCE_LOG_DUMP_COMMANDLINE		_T("/d %s /a %u /m WinHttp_Stress")


// path to get loragent.exe, lordll.dll, and stressme.ini
// these files are used to enable dump file logging and auto-debugging of crashes
#define STRESSINSTANCE_LORAGENT_FILES_PATH		_T("\\\\control\\stressme\\")


// ***************************
// ** Memory dump path
#define	STRESSINSTANCE_DEFAULT_MEMORY_DUMP_PATH	_T("\\\\mildew\\stress\\")

// ***************************
// ** relative path to the directory where the stressExe files will be downloaded to.
#define STRESSINSTANCE_STRESS_EXE_DOWNLOAD_DIR	_T("stressExe")

// ***************************
// ** Time to wait for stressExe to close after telling it
#define STRESSINSTANCE_STRESS_EXE_CLOSE_TIMEOUT	100

// ***************************
// ** Cross process event object names. We append the PID of the process to the end to prevent name collisions.
#define STRESSINSTANCE_STRESS_EXE_EVENT_EXITPROCESS			_T("ExitProcessEvent")


class StressInstance  
{
public:
				StressInstance();
	virtual		~StressInstance();

	BOOL		Begin();
	VOID		End();
	BOOL		IsRunning(DWORD);

	DWORD		Get_ID();
	LPTSTR		Get_StressExeMemoryDumpPath();
	DWORD		Get_StressInstanceRunID();

	VOID		Set_StressExeMemoryDumpPath(LPTSTR);
	VOID		Set_StressExeURL(LPTSTR);
	VOID		Set_StressExePdbURL(LPTSTR);
	VOID		Set_StressExeSymURL(LPTSTR);
	VOID		Set_StressExeID(DWORD);
	VOID		Set_PageHeapCommands(LPCTSTR);
	VOID		Set_UMDHCommands(LPCTSTR);

	BOOL		DownloadStressExe();

				// This is the timer callback proc that monitors the stressExe process.
	friend		VOID CALLBACK StressExe_TimerProc(HWND, UINT, UINT_PTR, DWORD);

				// This is the timer callback proc for the debugger object
	friend		DWORD DebuggerCallbackProc(DWORD, LPVOID, LPTSTR, LPVOID);

private:
	LPTSTR		m_szStressExe_URL;					// URL to the stress app
	LPTSTR		m_szStressExe_PDB_URL;				// URL to the stress app's pdb file
	LPTSTR		m_szStressExe_SYM_URL;				// URL to the stress app's sym file
	LPTSTR		m_szStressExe_FilePath;				// Local relative path of the downloaded stress EXE
	LPTSTR		m_szStressExe_FileName;				// Local filename of the downloaded stress EXE
	LPTSTR		m_szStressExe_FilePathAndName;		// Path and filename to the local stressExe downloaded
	LPTSTR		m_szStressExe_PageHeapCommandLine;	// Command line params when enabling pageheap.
	LPTSTR		m_szStressExe_UMDHCommandLine;		// Command line params when enabling UMDH.

	DWORD		m_dwStressInstance_ID;				// ID from the stressAdmin DB uniquely identifying this test case.
	DWORD		m_dwStressInstanceRunID;			// the stressInstanceRunID generated by the DB that we cache as soon as this instance starts.

	LPTSTR		m_szStressExe_MemDumpPath;			// path that the minidump will dump to

	Debugger	*m_objDebugger;						// the debughelp debugger object

	PROCESS_INFORMATION 	m_piStressExeProcess;	// stuct containing info on the stressExe process
	HANDLE					m_hStressExe_ProcessExitEvent;	// Cross process event we send stressExe to tell it to exit

	UINT_PTR				m_uiStressExeTimerID;	// ID for the timer that monitors the stressExe when it's spawned
};


#endif // !defined(AFX_STRESSINSTANCE_H__806226FB_2170_4FE3_ACCA_EF8952E6A524__INCLUDED_)
